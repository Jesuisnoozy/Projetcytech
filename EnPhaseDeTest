#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <errno.h>
#define NAMESIZE 21
typedef struct {
	char *name;
	int damage, focusdamage, heal, focusheal, poison, stun, confused;
} Attack;

typedef struct {
	char *name;
	int pvmax, stamina, poison, stun, confused, pv, dead, utiliunique;
	float defence, agility;
	Attack normal, special, unique;
} Bot;


Attack Attackbuilder(int num) {
	Attack att;
	switch(num) { // attaque normale (0-99) ; attaque spC)ciale (100-199) ; attaque normale (200-299)
        case 0:
		att.damage=0;
		att.focusdamage=50;
		att.heal=0;
		att.focusheal=0;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*12);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Coup Simple");
		break;
	case 1:
		att.damage=0;
		att.focusdamage=30;
		att.heal=0;
		att.focusheal=0;
		att.poison=1;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*16);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Coup Empoisonne");
		break;
	case 2:
		att.damage=0;
		att.focusdamage=0;
		att.heal=0;
		att.focusheal=30;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*12);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Soin simple");
		break;
	case 100:
		att.damage=0;
		att.focusdamage=75;
		att.heal=0;
		att.focusheal=0;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*12);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Coup double");
		break;
	case 101:
		att.damage=0;
		att.focusdamage=75;
		att.heal=0;
		att.focusheal=0;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*19);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Coup double poison");
		break;
	case 102:
		att.damage=0;
		att.focusdamage=0;
		att.heal=25;
		att.focusheal=50;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*12);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Soin double");
		break;
	case 200:
		att.damage=0;
		att.focusdamage=150;
		att.heal=0;
		att.focusheal=0;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*12);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Coup triple");
		break;
    case 201:
        att.damage=0;
        att.focusdamage=100;
        att.heal=0;
        att.focusheal=0;
        att.poison=0;
        att.stun=0;
        att.confused=0;
        att.name=malloc(sizeof(char)*19);
        if(att.name==NULL){ 
            exit(1);
        }
        strcpy(att.name, "Coup triple poison");
        break;
    case 202:
		att.damage=0;
		att.focusdamage=0;
		att.heal=30;
		att.focusheal=75;
		att.poison=0;
		att.stun=0;
		att.confused=0;
		att.name=malloc(sizeof(char)*12);
		if(att.name==NULL) {
			exit(1);
		}
		strcpy(att.name, "Soin triple");
		break;
	 default:
		printf("ERREUR: Mauvais numC)ro saisie pour le switchcase Attackbuilder\n");
		exit(1);
	}
	return att;
}

Bot Builder(float defen, float agil, int health, int norm, int spec, int uniq) {
	Bot a;
	a.defence=defen/100;
	a.agility=agil/100;
	a.pvmax=health;
	a.normal=Attackbuilder(norm);
	a.special=Attackbuilder(spec);
	a.unique=Attackbuilder(uniq);
	a.pv=health;
	a.poison=0;
	a.stun=0;
	a.confused=0;
	a.stamina=4;
	a.dead=0;
	a.utiliunique=0;
	return a;
}

Bot Characterbuilder(int num) {
	Bot a;
	switch(num) {
	// defence, agilite, points de vie, att normale, att speciale, att unique)
	case 1:
		a=Builder(25, 5, 200, 0, 100, 200);
		a.name=malloc(sizeof(char)*4);
		if(a.name==NULL) {
			exit(1);
		}
		strcpy(a.name, "Bob");
		break;
	
	case 1000:
		a=Builder(5, 50, 150, 0, 100, 200);
		a.name=malloc(sizeof(char)*5);
		if(a.name==NULL) {
			exit(1);
		}
		strcpy(a.name, "Test");
		break;
	case 1001:
		a=Builder(5, 50, 150, 1, 101, 201);
		a.name=malloc(sizeof(char)*11);
		if(a.name==NULL) {
			exit(1);
		}
		strcpy(a.name, "TestPoison");
		break;
	case 1002:
		a=Builder(5, 50, 150, 2, 102, 202);
		a.name=malloc(sizeof(char)*14);
		if(a.name==NULL) {
			exit(1);
		}
		strcpy(a.name, "TestMaxHealth");
		break;
	default:
		printf("ERREUR: Mauvais numC)ro saisie pour le switchcase Characterbuilder\n");
		exit(1);
	}
	return a;
}



int CheckPerso1(int choix, Bot *ja, Bot*jb, Bot *jc){
    switch(choix) {
    case 1:
        if(ja->dead==1 || ja->stun==1){
            return 1;
        }else{ 
            return 0;
            
        }
    case 2:
        if(jb->dead==1 || jb->stun==1){
            return 1;
        }else{ 
            return 0;
            
        }
    case 3:
        if(jc->dead==1 || jc->stun==1){
            return 1;
        }else{ 
            return 0;
            
        }
    default:
        return 1;
    }
}
int CheckPerso2(int choix, Bot *ja, Bot*jb, Bot *jc){
    switch(choix) {
    case 1:
        if(ja->dead==1){
            return 1;
        }else{ 
            return 0;
            
        }
    case 2:
        if(jb->dead==1){
            return 1;
        }else{ 
            return 0;
            
        }
    case 3:
        if(jc->dead==1){
            return 1;
        }else{ 
            return 0;
            
        }
    default:
        return 1;
    }
}

int CheckStamina(int choix, Bot *ja, Bot*jb, Bot *jc) {
    switch(choix) {
    case 1: 
        if(ja->stamina<3){
            return 1;
        }else{
            return 0;
        }
    case 2: 
        if(ja->stamina<8){
            return 1;
        }else{
            return 0;
        }  
    case 3: 
        if(ja->utiliunique==1){
            return 1;
        }else{
            return 0;
        }
    default:
        return 1;
    }
}

void Turn(int who, Bot *aa, Bot *ab, Bot *ac, Bot *da, Bot *db, Bot *dc) {
	int choixP, choixA, choixD; // choixP= selection du personnage, choixA= choix de l'attaque, choixD= choix du personnage affectC)
	if(who==0) {
		do {
			printf("Choisir son personnage (1, 2 ou 3)\n");
			scanf("%d", &choixP);
		}
		while(CheckPerso1(choixP, aa, ab, ac));
		do {
			printf("Choisir son attaque (1, 2 ou 3)\n");
			scanf("%d", &choixA);
		}
		while(CheckStamina(choixA, aa, ab, ac));
		do {
			printf("Choisir le personnage affecte (1, 2 ou 3)\n");
			scanf("%d", &choixD);
		}
		while(CheckPerso2(choixD, da, db, dc));
	} else { // Faut faire appelle C  l'IA qui va choisir l'attaque si 'who' est diffC)rent de 0
	}
	switch(choixP) {
	case 1:
	if (aa->confused==1){ 
	    if(rand()%2){ break; 
	    }
	}
		switch(choixA) {
		case 1:
			if(aa->normal.damage!=0) {
				da->pv=da->pv-(aa->normal.damage*da->defence);
				db->pv=db->pv-(aa->normal.damage*db->defence);
				dc->pv=dc->pv-(aa->normal.damage*dc->defence);
			}
			if(aa->normal.heal!=0) {
				aa->pv=aa->pv+aa->normal.heal;
				ab->pv=ab->pv+aa->normal.heal;
				ac->pv=ac->pv+aa->normal.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(aa->normal.focusdamage*da->defence);
				if(aa->normal.focusheal!=0){
				   aa->poison=0; 
				   aa->pv=aa->pv+aa->normal.focusheal;
				}
				if(aa->normal.poison==1) {
			    da->poison=1;
				}
				break;
			case 2:
				db->pv=db->pv-(aa->normal.focusdamage*db->defence);
				if(aa->normal.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+aa->normal.focusheal;
				}
				if(aa->normal.poison==1) {
			    db->poison=1;
				}
				break;
			case 3:
				dc->pv=dc->pv-(aa->normal.focusdamage*dc->defence);
				if(aa->normal.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+aa->normal.focusheal;
				}
				if(aa->normal.poison==1) {
			    dc->poison=1;
				}
				break;
			}
			break;
		case 2:
			if(aa->special.damage!=0) {
				da->pv=da->pv-(aa->special.damage*da->defence);
				db->pv=db->pv-(aa->special.damage*db->defence);
				dc->pv=dc->pv-(aa->special.damage*dc->defence);
			}
			if(aa->special.heal!=0) {
				aa->pv=aa->pv+aa->special.heal;
				ab->pv=ab->pv+aa->special.heal;
				ac->pv=ac->pv+aa->special.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(aa->special.focusdamage*da->defence);
				if(aa->special.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+aa->special.focusheal;
				}
				if(aa->special.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(aa->special.focusdamage*db->defence);
				if(aa->special.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+aa->special.focusheal;
				}
				if(aa->special.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(aa->special.focusdamage*dc->defence);
				if(aa->special.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+aa->special.focusheal;
				}
				if(aa->special.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		case 3:
			if(aa->unique.damage!=0) {
				da->pv=da->pv-(aa->unique.damage*da->defence);
				db->pv=db->pv-(aa->unique.damage*db->defence);
				dc->pv=dc->pv-(aa->unique.damage*dc->defence);
			}
			if(aa->unique.heal!=0) {
				aa->pv=aa->pv+aa->unique.heal;
				ab->pv=ab->pv+aa->unique.heal;
				ac->pv=ac->pv+aa->unique.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(aa->unique.focusdamage*da->defence);
				if(aa->unique.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+aa->unique.focusheal;
				}
				if(aa->unique.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(aa->unique.focusdamage*db->defence);
				if(aa->unique.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+aa->unique.focusheal;
				}
				if(aa->unique.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(aa->unique.focusdamage*dc->defence);
				if(aa->unique.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+aa->unique.focusheal;
				}
				if(aa->unique.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		}
		break;
	case 2:
	if (ab->confused==1){ 
	    if(rand()%2){ break; 
	    }
	}
		switch(choixA) {
		case 1:
			if(ab->normal.damage!=0) {
				da->pv=da->pv-(ab->normal.damage*da->defence);
				db->pv=db->pv-(ab->normal.damage*db->defence);
				dc->pv=dc->pv-(ab->normal.damage*dc->defence);
			}
			if(ab->normal.heal!=0) {
				aa->pv=aa->pv+ab->normal.heal;
				ab->pv=ab->pv+ab->normal.heal;
				ac->pv=ac->pv+ab->normal.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(ab->normal.focusdamage*da->defence);
				if(ab->normal.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+ab->normal.focusheal;
				}
				if(ab->normal.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(ab->normal.focusdamage*db->defence);
				if(ab->normal.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+ab->normal.focusheal;
				}
				if(ab->normal.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(ab->normal.focusdamage*dc->defence);
				if(ab->normal.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+ab->normal.focusheal;
				}
				if(ab->normal.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		case 2:
			if(ab->special.damage!=0) {
				da->pv=da->pv-(ab->special.damage*da->defence);
				db->pv=db->pv-(ab->special.damage*db->defence);
				dc->pv=dc->pv-(ab->special.damage*dc->defence);
			}
			if(ab->special.heal!=0) {
				aa->pv=aa->pv+ab->special.heal;
				ab->pv=ab->pv+ab->special.heal;
				ac->pv=ac->pv+ab->special.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(ab->special.focusdamage*da->defence);
				if(ab->special.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+ab->special.focusheal;
				}
				if(ab->special.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(ab->special.focusdamage*db->defence);
				if(ab->special.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+ab->special.focusheal;
				}
				if(ab->special.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(ab->special.focusdamage*dc->defence);
				if(ab->special.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+ab->special.focusheal;
				}
				if(ab->special.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		case 3:
			if(ab->unique.damage!=0) {
				da->pv=da->pv-(ab->unique.damage*da->defence);
				db->pv=db->pv-(ab->unique.damage*db->defence);
				dc->pv=dc->pv-(ab->unique.damage*dc->defence);
			}
			if(ab->unique.heal!=0) {
				aa->pv=aa->pv+ab->unique.heal;
				ab->pv=ab->pv+ab->unique.heal;
				ac->pv=ac->pv+ab->unique.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(ab->unique.focusdamage*da->defence);
				if(ab->unique.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+ab->unique.focusheal;
				}
				if(ab->unique.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(ab->unique.focusdamage*db->defence);
				if(ab->unique.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+ab->unique.focusheal;
				}
				if(ab->unique.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(ab->unique.focusdamage*dc->defence);
				if(ab->unique.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+ab->unique.focusheal;
				}
				if(ab->unique.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		}
		break;
	case 3:
	if (aa->confused==1){ 
	    if(rand()%2){ break; 
	    }
	}
		switch(choixA) {
		case 1:
			if(ac->normal.damage!=0) {
				da->pv=da->pv-(ac->normal.damage*da->defence);
				db->pv=db->pv-(ac->normal.damage*db->defence);
				dc->pv=dc->pv-(ac->normal.damage*dc->defence);
			}
			if(ac->normal.heal!=0) {
				aa->pv=aa->pv+ac->normal.heal;
				ab->pv=ab->pv+ac->normal.heal;
				ac->pv=ac->pv+ac->normal.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(ac->normal.focusdamage*da->defence);
				if(ac->normal.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+ac->normal.focusheal;
				}
				if(ac->normal.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(ac->normal.focusdamage*db->defence);
				if(ac->normal.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+ac->normal.focusheal;
				}
				if(ac->normal.poison==1) {
			    db->poison=1;
		      	}
				break;
			case 3:
				dc->pv=dc->pv-(ac->normal.focusdamage*dc->defence);
				if(ac->normal.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+ac->normal.focusheal;
				}
				if(ac->normal.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		case 2:
			if(ac->special.damage!=0) {
				da->pv=da->pv-(ac->special.damage*da->defence);
				db->pv=db->pv-(ac->special.damage*db->defence);
				dc->pv=dc->pv-(ac->special.damage*dc->defence);
			}
			if(ac->special.heal!=0) {
				aa->pv=aa->pv+ac->special.heal;
				ab->pv=ab->pv+ac->special.heal;
				ac->pv=ac->pv+ac->special.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(ac->special.focusdamage*da->defence);
				if(ac->special.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+ac->special.focusheal;
				}
				if(ac->special.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(ac->special.focusdamage*db->defence);
				if(ac->special.focusheal!=0){
				   ab->poison=0;
			       ab->pv=ab->pv+ac->special.focusheal;
				}
				if(ac->special.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(ac->special.focusdamage*dc->defence);
				if(ac->special.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+ac->special.focusheal;
				}
				if(ac->special.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		case 3:
			if(ac->unique.damage!=0) {
				da->pv=da->pv-(ac->unique.damage*da->defence);
				db->pv=db->pv-(ac->unique.damage*db->defence);
				dc->pv=dc->pv-(ac->unique.damage*dc->defence);
			}
			if(ac->unique.heal!=0) {
				aa->pv=aa->pv+ac->unique.heal;
				ab->pv=ab->pv+ac->unique.heal;
				ac->pv=ac->pv+ac->unique.heal;
				aa->poison=0;
				ab->poison=0;
				ac->poison=0;
			}
			switch(choixD) {
			case 1:
				da->pv=da->pv-(ac->unique.focusdamage*da->defence);
				if(ac->unique.focusheal!=0){
				   aa->poison=0;
				   aa->pv=aa->pv+ac->unique.focusheal;
				}
				if(ac->unique.poison==1) {
			    da->poison=1;
			    }
				break;
			case 2:
				db->pv=db->pv-(ac->unique.focusdamage*db->defence);
				if(ac->unique.focusheal!=0){
				   ab->poison=0;
				   ab->pv=ab->pv+ac->unique.focusheal;
				}
				if(ac->unique.poison==1) {
			    db->poison=1;
			    }
				break;
			case 3:
				dc->pv=dc->pv-(ac->unique.focusdamage*dc->defence);
				if(ac->unique.focusheal!=0){
				   ac->poison=0;
				   ac->pv=ac->pv+ac->unique.focusheal;
				}
				if(ac->unique.poison==1) {
			    dc->poison=1;
			    }
				break;
			}
			break;
		}
		break;
	}
}





void Checkup(Bot *ja, Bot *jb, Bot *jc, Bot *ra, Bot *rb, Bot *rc) {
	if(ja->poison==1) {
		ja->pv=ja->pv-10;
	}
	if(jb->poison==1) {
		jb->pv=jb->pv-10;
	}
	if(jc->poison==1) {
		jc->pv=jc->pv-10;
	}
	if(ra->poison==1) {
		ra->pv=ra->pv-10;
	}
	if(rb->poison==1) {
		rb->pv=rb->pv-10;
	}
	if(rc->poison==1) {
		rc->pv=rc->pv-10;
	}
	if(ja->dead==1) {
		ja->pv=0;
	}
	if(jb->dead==1) {
		ja->pv=0;
	}
	if(jc->dead==1) {
		ja->pv=0;
	}
	if(ra->dead==1) {
		ja->pv=0;
	}
	if(rb->dead==1) {
		ja->pv=0;
	}
	if(rc->dead==1) {
		ja->pv=0;
	}
	if(ja->pv<=0) {
		ja->dead=1;
	}
	if(jb->pv<=0) {
		ja->dead=1;
	}
	if(jc->pv<=0) {
		ja->dead=1;
	}
	if(ra->pv<=0) {
		ja->dead=1;
	}
	if(rb->pv<=0) {
		ja->dead=1;
	}
	if(rc->pv<=0) {
		ja->dead=1;
	}
	if(ja->pv>=ja->pvmax) {
		ja->pv=ja->pvmax;
	}
	if(jb->pv>=jb->pvmax) {
		jb->pv=jb->pvmax;
	}
	if(jc->pv>=jc->pvmax) {
		jc->pv=jc->pvmax;
	}
	if(ra->pv>=ra->pvmax) {
		ra->pv=ra->pvmax;
	}
	if(rb->pv>=rb->pvmax) {
		rb->pv=rb->pvmax;
	}
	if(rc->pv>=rc->pvmax) {
		rc->pv=rc->pvmax;
	}
	if(ja->dead==1 && jb->dead==1 && jc->dead==1 && ra->dead==1 && rb->dead==1 && rc->dead==1) {
		printf("EgalitC)\n");
		exit(1);
	}
	if(ja->dead==1 && jb->dead==1 && jc->dead==1) {
		printf("Le joueur A a perdu\n");
		exit(1);
	}
	if(ra->dead==1 && rb->dead==1 && rc->dead==1) {
		printf("Le joueur B a perdu\n");
		exit(1);
	}
	ja->stamina+=1;
	jb->stamina+=1;
	jc->stamina+=1;
	ra->stamina+=1;
	rb->stamina+=1;
	rc->stamina+=1;
}

int main() {
	Bot ja=Characterbuilder(1001);
	Bot jb=Characterbuilder(1002);
	Bot jc=Characterbuilder(1001);
	Bot ba=Characterbuilder(1000);
	Bot bb=Characterbuilder(1000);
	Bot bc=Characterbuilder(1000);

    printf("===========================================================\n");
	for(int i=0; i<strlen(ja.name); i++) { // print name
		printf("%c", *(ja.name+i));
	}
	for(int i=0; i<strlen(ja.normal.name); i++) {
		printf("%c", *(ja.normal.name+i));
	}
	printf("\n%d\n",ja.special.focusdamage);
	printf("\n%d\n",ba.pv);
	printf("\nJA HEALTH BEFORE: %d\n",ja.pv);
	printf("===========================================================\n");
	Turn(0, &ja, &jb, &jc, &ba, &bb, &bc);
	printf("\n%d\n",ba.pv);
	printf("\nJA HEALTH AFTER Turn: %d\n",ja.pv);
	Checkup(&ja, &jb, &jc, &ba, &bb, &bc);
	printf("\n%d\n",ba.pv);
	printf("\nJA HEALTH AFTER Checkup: %d\n",ja.pv);

	return 0;
}
